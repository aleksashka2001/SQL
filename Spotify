# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 


Q.#1 Which artists had the most songs in top 50?

Select artist_name, count(*)
From BIT_DB.Spotifydata
Group By artist_name
Order by  count(*) desc
Limit 2;

  Q.#2 
What artist released the longest song? 

Select artist_name, max(duration_ms)/60000 as duration_min
From Spotifydata

Q. #3 TOP 10 songs in 2021

Select track_name, popularity
From Spotifydata
Order by popularity desc
Limit 10;

Q#4 Find average tempo of top 50 songs 
Select AVG (tempo)
From Spotifydata
Order by tempo asc;

Q#5 Compare average tempo in top 50 songs

Select AVG(tempo), artist_name, track_name,
Case when avg(tempo)>=121 then "above average"
When avg(tempo)<=121 then "below average"
When avg(tempo)=121 then "average"
End as Compare_Average
From BIT_DB.Spotifydata
Group by track_name
Order by avg(tempo) asc;

Q#6. What's the average danceability for the 10 most popular songs?

Select AVG (danceability), track_name
From Spotifydata
Group by track_name
Order by danceability desc
Limit 10;
